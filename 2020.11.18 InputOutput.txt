
2020.11.18

[ Input(입력) / Output(출력) ] - Byte Stream


<Stream> FIFO (First In First Out)
: 데이터를 전송할 경우에 문자 형식의 데이터가 연속적인 '열'을
만들고 있는 것이라든가, 자원으로부터 제어장치로의 데이터의 루트.
프린터로 출력할 때 컴퓨터로부터 어떤 논리적 회선의 신호 교환


@ Stream 구분 방법

1. 전송되는 데이터의 크기 (~Stream, ~er)
~Stream : 바이트스트림, 1byte 전송 / 문자 이외의 데이터 멀티미디어 관련
~er : 문자스트림, 2byte 전송 / 깨질 위험이 있어서 안전하게 사용할때 씀.
[BufferedReader, PrintWriter, filWriter... ~er]

2. 특별한 기능의 여부 -> 필터 스트림(Filter Stream)
   장치와의 직접적인 연결 여부 -> 노드 스트림(Node Stream)

@ 구조
	 1. Stream을 선언만 합니다.
	 2. try~catch~finally 구조를 만듦
	 3. finally 안에 try~catch
	 4. finally 안에 있는 try에 close( ) 호출, catch에 예외처리
	 4-1. in, out이 null 이라면 if문 사용
		if (out != null) {
              	out.close();
	 5. 원래의 catch에 예외처리
	 6. 원래의 try를 코딩

	// 파일 처음부터 끝까지 데이터를 1바이트씩 읽어 옴.
	// 몇 번의 반복문을 사용해야 하나? 모름
	// 그래서 for가 아니라 while문 사용

@ BufferedStream
try~catch 부분에서 바이트스트림보다 먼저 닫아야함.

	if (bis != null) {
		bis.close();
	}
				
	if (in != null) {
		in.close();
	}

@ 배열을 이용해서 Bufferedstream 같은 속도로 데이터 전송.

	while (true) {
		int length = in.read(arr);
		if (length == -1) {
			break;
		}
		out.write(arr, 0, length);
	}

@ 데이터를 저장할 때, file.esparator 를 사용하여 업로드해야함.

in = new FileInputStream("C:" + File.separator + "test.jpg");
out = new FileOutputStream
	("."+File.separator+"src"+File.separator+"upload"+File.separator+ "test_copy2.jpg");

-------------------------------------------------------------------------------

< 가장 많이쓰는 형태 I/O + 배열 >

public void me3() {
	InputStream in = null;
	OutputStream out = null;
		
	try {	
		in = new FileInputStream("C:" +File.separator+ "test.jpg");
		out = new FileOutputStream("C:" +File.separator+ "test_copy.jpg");
			
		int what = -1;
		byte[] arr = new byte[1024];	
			
		while (true) {
			int length = in.read(arr);
			if (length == -1) {
				break;
			}
			out.write(arr, 0, length);
		}
		System.out.println("end");
	
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if(out != null)
				out.close();
		} catch (Exception e2) {
			e2.printStackTrace();
		}
	}
}
