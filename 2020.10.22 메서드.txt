2020.10.22

@ private 을 만들 땐 get, set 메서드를 무조건 만들어야함.

**[get - 반환o 파라미터x / set - 반환x 파라미터o]**
[유반환, 유파람이라면 make를 사용]
=> 메서드명을 임의로 지을 수 있는것은 무반환 무파람, 유반환 유파람

@ (메서드) 오버로딩 사용조건 : 같은 클래스에서 이름이 같을 경우만 성립.

@ 멤버변수는 99.999% 접근제한자를 private으로 설정.
private 접근제한자는 같은 클래스에서는 접근을 허용하지만,
같은 패키지나 다른 패키지에서는 접근을 거부한다.

하지만 객체의 멤버변수는 값을 수정하거나, 값을 활용할 수 있어야 한다.
private으로 설정된 멤버변수의 값을 수정하고 반환받으려면 get/set 메서드를 이용.
(get은 변수를 가져올 때, set은 변수에 대입할 때)
(alt+shift+s 를 사용하여 get/set 쉽게 작성가능)

?? dog형 디폴트 생성자
public Dog(){}

?? 유반환 유파람 메서드
=> 입력받은 숫자 두개의 더하기 결과를 반환하는 add()메서드

---> CarRegistManagementService class

public int add(int a, int b) {
		
		return (a+b);
}

---> main class
CarRegistManagementService crms2 = new CarRegistManagementService();
		int count = crms.add(1, 2);
		System.out.println(count);


==> long 형을 사용하는 경우

---->CarRegistManagementService class
public long add(int a, int b) {
		
		return (long)a + b;

----> main class
CarRegistManagementService crms2 = new CarRegistManagementService();
		long count = crms.add(100000000, 2000000000);
		System.out.println(count);


?? makeDog()
name, age를 외부에서 입력받아 그와 관련된 Dog객체를 반환하는 메서드
public Dog makeDog(String name, int age) {
		// return new Dog(name, age);
		
		Dog d = new Dog();
		d.setName(name);
		d.setAge(age);
		
		return d;
	}

?? make 메서드를 호출
DogRegistManagementService a = new DogRegistManagementService();
		Dog re1 = a.makeDog("happy", 3);
		System.out.println(re1);

?? sysout을 이용해서 강아지의 이름과 나이를 나오게 해라

==>> DogRegistManagementService class
public class DogRegistManagementService {
	private Dog dog;
	
	public DogRegistManagementService() {
	// TODO Auto-generated constructor stub
}

	public Dog getDog() {
		return dog;
	}

	public void setDog(Dog dog) {
		this.dog = dog;
	}
	
	public Dog makeDog(String name, int age) {
		// return new Dog(name, age);
		
		Dog d = new Dog();
		d.setName(name);
		d.setAge(age);
		
		return d;
	}
}

==>> main class
DogRegistManagementService a = new DogRegistManagementService();
Dog re1 = a.makeDog("happy", 3);
System.out.println(re1.getName());
System.out.println(re1.getAge());

===================================================
[메서드의 기본 4유형 입력, 호출 방법]
Dog class에 me1() ~ me4()가 있다는 가정 하에 작성


a. 항상 같은내용만 실행 
-> public void me1(){}
---> Dog d1 = new Dog();
d1.me1();

b. 외부로 부터 name과 age를 넘겨받고, 파라미터가 있기 때문에 동적인 신호가 가능
-> public void me2(String name, int age){
---> d1.me2("kim", 33);

c. 항상 같은내용만 반환된다, return 말고도 다른 코드도 사용가능, 마지막에 return 입력.
->public Dog me3(){
int a=3;
sysout(c);
return new Dog();
---> Dog ddd = d1.me3();
sysout(ddd);

d. 유반환 유파람
public int me4(String name){
int size = name.length;
return size;
---> d1.me4(new String("heel");
int size = d1.me4(new String("heel"));
sysout(size);




