
2020.11.12

# 예외 : 프로그래머가 조치할 수 있는 이상 현상
   [ 사용자의 입력값이 논리적으로 맞지 않거나 문법적으로 맞지 않는 상황]
# 에러 : 프로그래머가 조치할 수 없는 이상 현상 [ jvm, 단전

=================================================

Throwable : 예외와 에러의 최상위 부모 클래스

*Exception : 예외의 최상위 부모클래스*

자바는 예외도 클래스로 관리하고 있음.
throw --> 문법적으로는 이상이 없지만, 논리적으로는 이상이 있는 경우
사용자 정의 예외 클래스를 만듦
Exception, RuntimeException

try ~ catch : 예외가 발생했을 때, 어떻게 조치해야 하는지 알고 있을 경우
예외가 발생해서 조치한 내용에 대해 책임질 수 있으면 try~catch 사용
[요구사항 명세서에 조치사항이 적혀 있을 때] 

throws : 예외가 발생했을 때, 어떻게 조치해야 하는지 모르고 있을 경우
예외가 발생해서 조치한 내용에 대해 책임질 수 없으면 throws 사용
[요구사항 명세서에 조치사항이 적혀 있지 않을 때] 

finally : 예외가 있든 없든 반드시 실행해야 하는 코드 구문
	return보다 더 강력하다.

=================================================
<면접에서의 예상질문과 대답>

1. 예외 처리 잘 하세요?
[뜻 : try~catch만 할 수 있는가]
=> try ~ catch와 throw를 구분해서 사용할 수 있고,
예외가 발생하든 그렇지 않든 반드시 실행할 코드가 있으면 finally 구문에 작성할 수 있고,
강제로 예외를 발생시키기위해 throw를 사용할 수 있으며,
그에 따른 사용자 정의 예외 클래스도 작성할 수 있습니다.
(* 강제로 예외가 발생할 경우는 문법적으론 이상이 없지만, 
	논리적으로 이상이 있을 때)

2. 예외 메세지 읽을 줄 아세요?
[뜻 ; 예외가 발생했을 때, 넘겨주는 메세지를 보고 조치할 수 있나?]
=> 예외 발생 원인과 예외 발생 위치를 확인하고,
내가 조치할 수 있는 내용이면 곧 바로 조치하고 모르는 내용이면
구글에서 검색하여 조치를 취해왔다.


