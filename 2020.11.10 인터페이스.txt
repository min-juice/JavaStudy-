
2020.11.10

1. 몬스터는 한 마리만 있음
2. 영웅은 무기를 3개만 갖고 있음
2-1. 무기의 공격력은 각각 다름
3. 영운은 3개의 무기 중 하나를 손에 들고 몬스터를 공격할 수 있음
4. 영웅은 손에 들고 있는 무기를 다른 무기로 교체할 수 있음
5. 공격을 할지 무기교체를 할지 종료를 할지는 사용자가 콘솔에 입력하여 결정함
6. 무기교체도 사용자가 콘솔에 입력하여 결정함.

==================================================

#회원관리 프로젝트
- create 입력 / read 조회 / update 수정 / delete 삭제

@ 인터페이스 : 일종의 추상클래스이지만, 멤버변수나 일반 메소드를 가질 수 없고
                    추상메소드와 상수만 가질 수 있다.
- 모든 멤버변수는 public static final 이어야 한다
- 모든 메소드는 public abstract 여야 한다.
===> 예외없이 모든 멤버에 적용되므로, 생략 가능(컴파일러가 알아서 처리)

# class 구성요소 : 변수/ 상수/ 생성자/ 메서드
# interface 구성요소 : public static 상수

(public final static) int AA_BB = 10;
  --> public 적지않아도 인터페이스 안에서는 다 들어가 있음
(public abstract) void me1( );

a. 인터페이스의 상속
: 인터페이스끼리만 가능, 클래스와는 달리 다중상속 가능
==> 인터페이스 안에서는 변수처럼 보이는 문자열들이 모두 상수.

b. 인터페이스의 구현
: implements 키워드를 사용, 여러 인터페이스를 동시에 구현 가능
==> 인터페이스의 일부 메소드만 구현한다면, 클래스를 추상클래스로 선언해야함.

c. 인터페이스를 이용한 다형성
List<String> list = (List<String>) new ArrayList<String>( );

==> 위와 같이 인터페이스를 참조변수로 선언하고 인터페이스를 구현하는
클래스의 인스턴스를 대입할 수 있다.
그리고 인터페이스를 매개변수나 리턴 타입으로 지정이 가능하다.

*리턴타입이 인터페이스라는 것은 메소드가 해당 인터페이스를 구현한 클래스의
  인스턴스를 반환한다는 것을 의미

d. 인터페이스의 장점
1) 개발 시간을 단축시킬 수 있다.
2) 표준화가 가능하다
3) 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
4) 독립적인 프로그래밍이 가능하다.

# 클래스는 한개의 부모클래스만 상속 받을 수 있음.
 => 하지만 부모클래스가 그의 부모클래스(조부모)로 부터 상속 받았다면
       자식클래스는 결과적으로 두개의 클래스로부터 상속을 받는 셈.

# 클래스가 여러개의 인터페이스를 구현하고 있는 것도 다중 상속에 속함.

# 클래스가 클래스를 (상속) : extends
    인터페이스가 인터페이스를 (상속) : extends
    클래스가 인터페이스를 (구현) : implements
=> 같은 구조는 상속, 구조가 다르면 구현

다형성
부모자료형 변수명 = new 자식 생성자;
인터페이스에서 적용

자료형 통일
오버라이딩
단점 : 자식클래스가 갖고 있는 고유의 자원에 접근 불가
instance Of 나 get class 메서드를 이용해서 형 변환으로 변경가능