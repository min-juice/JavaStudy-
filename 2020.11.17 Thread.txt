
2020.11.17
<Collection>
데이터 저장을 효과적으로 하기 위한 저장소
프로그램에서 기변적인 데이터를 관리하기 위해 사용한다.
(배열 같은 경우는 생성 후 고정된 길이 이상의 값 저장 X)
ex) 고객관리 프로그램에서의 고객추가 및 삭제와 같은 과정을 위함
*컬렉션의 요소로는 '객체'만 들어갈 수 있다.

<Set>
순서가 없다.
중복을 허용하지 않는다.
add(Object) : 데이터를 집어넣는 메서드

<List>
순서가 있다.
중복을 허용한다.

<Map>
순서가 없다
(Key, Value)의 한 쌍으로 이루어져 있다.
기본적으로 Set과 비슷한 듯 하나, 데이터가 쌍으로 이루어져 있다.
put(ket,value) : 데이터를 집어넣는 메서드
get(key) : 데이터를 가져오는 메서드
get( )메서드 사용 시, key값을 이용하면 value값이 return 된다.

<Process>
프로세스는 실행중인 프로그램이다. 프로그램을 실행하면
OS로부터 실행에 필요한 자원(메모리)을 할당받아 프로세스가 됨.
프로세스 = (데이터 + 메모리) + 스레드
*실제로 작업을 수행하는 것은 스레드.

<Multi Thread>
멀티스레드 프로세스는 둘 이상의 스레드를 가진 프로세스.
멀티스레드의 장점
1. CPU의 사용률을 향상시킨다.
2. 자원을 보다 효율적으로 사용할 수 있다
3. 사용자에 대한 응답성이 향상된다.
4. 작업이 분리되어 코드가 간결해진다.

[ Thread ]
main메서드에서 run( )을 호출시키는것은 생성된 스레드를
실행시키는게 아니라, 메서드를 호출하는것.

start( ) 메서드를 호출하면 그때 스레드 생성 됨.
스레드들간의 데이터가 공유된다.
그러나, stack 영역의 데이터는 공유 불가.

스레드가 생성되면 runnable 상태가 된다.
그때, run( )메서드

스레드의 생애주기(Life cycle)
생성 [start( )호출]   ->  " runnable 상태
->  running[run( )실행] "  ->  dead[소멸]

-------------------------------------------------------------------------
<thread>
한번에 여러 작업을 동시에 하는 것을 의미.
좋은 기능이지만, 한가지 문제점은 여러가지 작업에서 공통적으로
쓰이는 데이터에 대하여 한번에 여러 스레드가 접근한다면,
프로그램이 예상과는 다른 방향으로 꼬여버릴 수 있다.

<synchronized>
멀티 스레드 환경에서 공유하는 자원을 사용하는 작업이 있으면,
작업이 종료되기 전까지 다른 스레드에게 사용권을 뻇기지 않도록
다른 스레드를 대기시켜야 함. 이렇게 대기하도록 할 수 있는 것
[공유데이터에 대하여 스레드들의 동시 접근 방지하는 해결책]

synchronized 는 자물쇠, 자물쇠를 열고 들어가야 코드가 실행이 됨.
열쇠는 해당 클래스로 만들어진 객체가 열쇠.
**같은 객체 끼리는 같은 열쇠**

<wait ( )>
다른 스레드가 이 객체의 notify( )를 불러줄 때까지 대기.

<notify( )>
이 객체에 대기 중인 스레드를 깨운다.
2개 이상의 스레드가 대기 중이라면, 랜덤으로 하나의 스레드를 깨운다.

<notifyAll( )>
이 객체에 대기 중인 모든 스레드를 깨운다.
단 한번에 모두 깨우는 것이 아니라, 임의로 배정된 순서대로 깨운다.
※ 위의 3가지 메서드(wait, notify, notifyAll 은
	필수적으로 synchronized 임계영역 안에 넣으므로
	중간의 꼬임을 방지해줌. ※

상속(extends Thread)
1. 상속은 생성 후 start( )메서드로 간단하게 실행할 수 있다.
2. 자바에서는 다중 상속이 불가능하기 때문에
다른 클래스를 상속해야 하는 상황에서는 여러 상속을 받아야해서
프로그램이 복잡해 질 수 있다.
그러므로, 확장성이 중요한 경우에는 사용 X

인터페이스(implements Runnable)
1. 인터페이스는 start( ) 메서드가 없으므로, Runnable을
구현한 스레드를 매개변수로 새로운 thread를 생성해야함. 
2. 생성한 thread로 start( )실행 가능.
3. 인터페이스의 특징으로 다중 상속이 가능.
즉, thread의 기능을 구현함과 동시에 다른 클래스 또는
인터페이스를 상속 받을 수 있다.

sleep(long millis)
- sleep( )에 의해 일시정지된 스레드는 지정시간이 다 되거나
interrupt( )가 호출되면, interruptException이 발생되어 잠에서
깨어나 실행대기 상태가 됨.
그래서 sleep ( ) 호출 시엔, 항상 try-catch문으로 예외처리 필수

-------------------------------------------------------------------------
<thread의 영역>
main ( ) : main
run ( ) : 사용자 스레드
=================
join ( ) : 이 메서드를 호출한 스레드는 현재의 영역을
관리하는 스레드보다 먼저 dead상태로 빠진다.

t1스레드가 t2스레드보다 먼저 dead 상태가 되게 하려면?
t1. join( ) -> try~catch => t2 클래스에 코딩

t1스레드가 메인 메서드보다 먼저 dead 상태가 되게 하려면?
t1. join( ) -> try~catch => main( )메서드에 코딩
-----------------------------------------------------------------------

	public  void subTes(int n) {
		synchronized (key1) {
			tes -= n; // test = tes - n
		}
	}
	
	public  void addNum(int n) {
		synchronized (this) {
			num += n; //num = num + n
		}
	}
	
	public void subNum(int n) {
		synchronized (this) {
			num -= n;
		}
	}
	
	public void addTes(int n) {
		synchronized (key1) {
			tes += n;
		}
	}
===> 	같은 tes 는 같은 객체 key1 사용
	같은 num은 같은 객체 this 사용
-------------------------------------------------------------------------

<상속 extends Thread>
상속은 생성 후 start( )메서드로 간단하게 실행할 수 있다.
sleep ( ) 호출 시엔, 항상 try-catch문으로 예외처리 필수

public void me1() {
	for(int i = 0; i<10; i++) {
		System.out.println("Test1: " +i);
		
	try {
		Thread.sleep(1000);
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		}
			
	}
}

====>
		System.out.println("main start");
 	t1.start();
	t2.start();
		System.out.println("main end");

------------------------------------------------------------------------

<인터페이스 implements Runnable>
인터페이스는 start( ) 메서드가 없으므로, Runnable을
구현한 스레드를 매개변수로 새로운 thread를 생성해야함. 

public class Test3 extends Unit implements Runnable {

	@Override
	public void run() {
	for (int i = 0; i < 10; i++) {
		System.out.println("Test3 :" + i * 100);

	try {
		Thread.sleep(1000);
		} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();

=====>
	Test3 r3 = new Test3();
	Test4 r4 = new Test4();
		Thread t3 = new Thread(r3);
		Thread t4 = new Thread(r4);
	t3.start();
	t4.start();

	new Thread(new Runnable() {
			
	@Override
	public void run() {
		System.out.println("통신 등을 구현할 때, 자주 쓰는 스레드");
				
	}
}).start();        //생성한 thread로 start( )실행 가능.