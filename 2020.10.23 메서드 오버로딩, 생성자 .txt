
*메서드 오버로딩(method overloading)*
 => 오직 파라미터의 개수, 자료형에 영향을 받음.
 => 메서드 오버로딩의 장점은 메서드 호출 때 나옴.

@ 메서드 오버로딩의 선결 조건
 a. 같은 클래스에서 생성된 메서드들
 b. 메서드의 이름이 같아야 함.

@ 메서드 오버로딩 성립 조건 (or)
 a. 파라미터(=매개변수)의 개수가 다르면 성립
 b. 파라미터의 개수가 같은데, 파라미터의 자료형이 다르면 성립
 c. b의 [파라미터의 개수, 자료형이 다름] 상황에서
    파라미터 자료형의 배치 순서가 다르면 성립

@ 메서드 오버로딩을 사용해야 하는 경우
 - 메서드들의 전반적인 기능이 같은데, 파라미터의 자료형이 다를 때

@ 메서드 오버로딩과 관련 없는 것들
 - 접근제한자
 - 반환형
 - 파라미터의 변수명
 - 메서드의 본문 내용

@ 메서드 오버라이딩
 => 상속 관계가 성립하는 두 클래스에서 자식클래스가
      부모클래스의 메서드 내용을 재 정의 (수정/삭제/추가)

====================================================

*생성자*
 => class의 멤버변수를 초기화하는 클래스의 구성 요소
    [생성자는 반환형 x]

@ 생성자 공식
 - 접근제한자 생성자명 ( ) { }

@ 생성자의 기능
 - 클래스의 멤버변수 초기화
 - 참조자료형의 자료형에 맞는 값을 제공함 [new 자료형 ( )]
 - 생성자의 첫번째 라인에 this (); 를 입력하면 생성자 생성 가능.
    [하지만, 무조건 첫번째 라인에 입력해야 하므로, 메서드가 더 유용함]

@ 생성자 : 디폴트 생성자 / 사용자 생성자
 a. 디폴트 생성자 : 파라미터가 없는 생성자
     - 클래스에 다른 생성자가 없으면, 디폴트 생성자가 눈에 보이지 않아도 존재
     - 클래스에 다른 생성자가 있으면, 디폴트 생성자가 눈에 안보이고, 존재도 x

b. 사용자 생성자 : 파라미터가 있는 생성자
