
2020.10.29

[복습]

대입 : =
산술 : + - * / %
복합 : += -= *= /= %=
논리 : && || !
증감 : ++ -- 
> >= < <= == !=
비트 :& ^ | ~ 
시프트 : >> <<

조건, 삼항 : 변수명 = 조건식 ? 참일 때의 값 : 거짓일 때의 값, 변수, 반환형메서드;

=========================================================

@ 조건문 : 특정 조건을 만족했을 때, 원하는 작업수행을 보장하기 위한 제어문
- 단순 if
- if ~ else
- if ~ else if ~ else if (다중 if문)
- switch ~ case

@ 반복문 : 특정 조건을 만족했을 때, 원하는 작업을 반복적으로 보장하기 위한 제어문
- for
- 다중 for
- while
- 다중 while

@ 조건문을 사용해야 하는 상황인지
1. int a = 4이다. [a가 10이 될 때]까지 sysout(a)를 실행하라.
                     [ a <= 10이면, sysout(a)를 실행하라]
for(int a=4; a<=10; a++) { sysout(a); }

2. 외부로부터 넘겨받은 정수 a가 10보다 크면, sysout("ok") 실행.
(= 10보다 작으면 실행 x)

3. 변수 b가 true이면 return 44; 그렇지 않으면, return 55; 를 실행.
=> if ~ else 사용.

4. 변수 c가 10보다 크면 sysout('a'); 그렇지 않고 c가 5보다 크면 sysout('b');
그렇지 않고 c가 1보다 크면 sysout('c'); 이도저도 아니면 sysout('d');
=> else if else if (다중 if) 사용.


?? a가 5의 배수이고 6의 배수이면, sysout(30)
public void me1() {
		int a = 10;
public void me2(int a) {
		if (a % 5 == 0 && a % 6 == 0) {System.out.println(30);
	}

?? x가 0보다 작으면 sysout(3); 그렇지 않으면 sysout(-3);

?? score가 90 이상이면 '수' 그렇지 않고 80 이상이면 '우'
 그렇지않고 70 이상이면 '미' 그렇지않고 60이상이면 '양'
 그렇지않으면 '가' 를 반환

public char me7(int score) {
                        ** char result = '수'; **
		if (score >= 90) {result = ('수');}
		else if (score >= 80) {result = ('우');}
		else if (score >= 70) {result = ('미');}
		else if (score >= 60) {result = ('양');}
		else {result = ('가');
		} return result;
		} 
}

# return;  만 있으면 그 밑의 코드들은 실행 x

public void me1 (int a) {
	sysout(1);
	sysout(2);
	if(a != 3) {
		return;
	}
	sysout(4);
	sysout(5);
}

===?>> 객체명.me(5) 경우, 출력되는 값은 ?? 답 : 1, 2

========================================================
<SwitchCase>

1. 내부적으로 == 연산이 진행됨.
2. 사용할 수 있는 자료형: int, String, enum
3. break는 상황에 따라 안 쓸 수도 있다.
4. break는 switch ~ case 문을 빠져나가라는 의미.
5. default는 모든 조건이 일치하지 않을 때 사용 됨.
6. switch문은 변수값에 따라 실행값이 달라진다.
7. 주로 조건이 하나인 변수 값이나 상수값으로 구분되는 경우 사용
  하나의 값으로 조건을 비교할 수 있을 때 사용.
  예) 시험 점수 a, b, c처럼 대상을 하나의 값으로 비교할 수 있을 때.

 key -> 변수
 Switch = if
 case = else if
 default = else

switch (변수 또는 변수 연산) {
	case 값1 :
		변수 == 값1일 때, 실행할 코드
		break; //break는 상황에 따라 운용
			//break는 swich~case문을 빠져나가라는 의미

	case 값2 :
		변수 == 값 2일 때, 실행할 코드
		break;
	default :
		모든 조건이 false 일 때, 실행할 코드
		break;

=========================================================

@ method : 객체의 기능(=능력) 표현
함수 능력 : 여러 번 반복되는 코드를 묶어 놓은 덩어리

메서드 내에서 중복되는 데이터가 있다면 -> 변수로 처리
클래스 내에서 각 메서드 중에 *중복*되는 코드가 있으면 -> 메서드로 처리
프로젝트 내에서 각 클래스 중에 중복되는 코드가 있으면 -> 상속

=========================================================

1번문제)

달력 : 1, 3, 5, 7, 8, 10, 12 : 31 sysout(31일까지 있습니다)
2: 28 sysout(28일까지 있습니다)
나머지 :30일 (30일까지 있습니다)

public void me6(int month)

2번문제)

수, 우, 미, 양, 가 출력

public void me6(int score)

3번문제)

순위에 따라 선수들에게 수여하는 메달 색을 정하는 프로그램 제작
순위에 들지 못한다면 'A'를 줌.
G, S, B, A 순으로   ====> 정답은 카톡링크

4번문제)

a 변수에 b의 값을 넣고 b 변수에는 a의 값을 넣으려고 합니다. 치환 알고리즘.

public void me8(String a, String b) {

===>    String c = a;
	a = b;
	b = c;









