
2020.11.11

예외처리 : 에러가 발생해도 그 부분만 넘어가고 계속 실행을 함
	예외 처리를 하지 않으면 뒤 내용은 신경 쓰지 않고
	에러를 출력하고 프로그램이 종료됨.

- 사용이유 :
1. 예외 발생시 프로그램이 강제 종료 되기 때문에 다음 로직에 문제 발생
이를 막기 위해서 예외처리를 사용해준다.
2. 여러 예외가 발생했을 때 원하는 작업을 하기 위해서 사용해준다.

@ try ~ catch : 개발자의 잘못을 처리하기 위해 사용해서는 안 됨.
문법적으론 이상이 없지만 논리적으로 이상이 있을 경우,
사용자로부터 데이터를 입력받아야 하는데, 
그 때, 사용자가 잘 못된 데이터를 입력했을 것을 대비해서 사용함.

***예외처리 한다고해서 예외가 사라지는 것은 아님***
try ~ catch ~ finally(선택사항) 문
1. try : 영역에 예외가 발생할 수 있는 코드

 - catch : 예외가 발생할 때 실행할 코드 [하위 예외클래스 먼저 선언]
   	(주로 catch 블록이 여러개여도 단 한가지만 실행된다
	하지만, | 로 연결하면 여러개의 예외처리도 받을 수 있음)

2. finally = 예외가 발생하든 그렇지 않든 항상 실행해야 하는 코드
	return보다 더 강력함.
(메모리가 낭비되지않게 "정리"작업을 finally에서 해준다)
( IO, Scanner 같은 무거운 작업할때 무조건 close 시켜줘야함)

try{
	예외가 발생될 것으로 예상되는 문장;
 } catch(예외이름 객체){	
	예외가 발생되면 문장;
 } catch(예외이름 객체){
	예외가 발생되면 실행할 문장;
 }finally{
	예외 여부에 상관없이 무조건 실행할 문장;
 }


3. throws : 키워드 "throws"는 메소드 선언부의 끝에 작성되며,
키워드 다음에 오는 예외클래스는 쉼표를 사용해서 나열해준다.

메소드에서 처리하지 않은 예외를 호출한 예외클래스로 떠넘기는 역할을 함.

보통 예외 발생 시 조치사항이 필요하지 않을 때,
또는 동일한 예외가 자주 발생하는 경우,
throws를 통해서 예외사항을 처리할 수 있도록 보내버리는 것

4. throw : 문법적으로 예외는 아니지만 논리적인 예외를 발생시키는 기능

5. 사용자 정의 예외 클래스 : 
가능하면 Exception을 상속하도록 하여 throw를 날리도록 구현하라.
그러면 호출하는 메서드에서 try ~ catch 작업이 가능 함.

