
2020.10.28

[복습]

@ 객체
- 자료형 변수명 = new 자료형( );
객체.변수
객체.상수
객체.메서드
객체.get메서드( ).

@ 클래스
- 멤버변수, 생성자, 메서드
- 객체의 설계도
- class 키워드가 있어야 클래스
- 객체의 구성요소를 표현
- 객체 생성 방법(=참조자료형의 자료형에 맞는 값을 제공) -> 생성자 
- 멤버변수 초기화 -> 생성자
- 객체의 기능을 표현

# 인스턴스 변수 : 객체가 생성될 때, 힙 메모리에 함께 생성

@ 오버로딩 (overloading) [= 메소드 오버로딩 = 생성자 오버로딩]

 예) 
a.   int add(int a, int b) {return a+b;}
     int add(int x, int y)  {return x+y;}
 ==> 위는 매개변수 타입이 같아서 (int) 오버로딩 불가.

b.  int add(int a, long b) {return a+b;}
    int add(long a, int b) {return a+b;}
 ==> 위는 매개변수 타입이 같지만, 순서가 달라서 오버로딩 가능.

       구분                      Overriding                          Overloading

  접근 제어자     부모클래스 메소드 접근제어자보다         모든 접근제어자
                     더 넓은 범위의 접근 제어자를                   사용 가능
                     자식 클래스의 메소드에서 설정가능.         

     리턴형                     동일해야 함                          달라도 됨

    메소드명                   동일해야 함                         동일해야 함

    매개변수                   동일해야 함                          달라야 함

    적용범위              상속관계에서 적용               같은 클래스 내에서 적용

===================================================

@ 비교연산자 : > , >= , < , <= , == , !=
     [연산 결과는 false, true ==> boolean 형]
 a > b : a는 b보다 크다. (왼쪽부터 읽어야 함)
 a >= b : a는 b보다 크거나 같다.
 a < b : a는 b보다 작다.
 a <= b : a는 b보다 작거나 같다.
 a == b : a와 b는 같다.
 a != b : a와 b는 안 같다.

# if( ) { return " " ; } else { return " "; }

** me4( ) : 두 개의 byte형 파타미터를 넘겨받아서,
 첫 번째 파라미터가 두 번째 파라미터보다 작거나 같은지 여부를 확인하고
 그 결과를 반환하시오

public boolean me4(byte a, byte b) {
		//boolean result = a <= b;
		return a <= b;

===> t1.me4((byte)3, (byte)-5);   ***

?? me51( ) : 두 개의 boolean형 파라미터를 넘겨받아서,
 첫 번째 파라미터가 두 번째 파라미터와 안 같은지 여부를 확인하고
 그 결과를 출력하시오 (= true, true 둘이 같으면 false)

public void me51(boolean a, boolean b) {
		System.out.println(a != b);
                    // boolean result1 = a != b;
                    // sysout(result1);
===> t1.me6(true, true);

================================================

=
+, -, *, /, %
+=, -=, *=, /=, %=
>, >=, <, <=, ==, !=

@ 논리연산자 [ && (=그리고), || (=또는), ! (=not) ]
 - && 는 연산에 참여하는 데이터가 모두 true일 때 -> true
  하나라도 다르면 -> false
                        t2.k1(true, true);  --> true
		t2.k1(true, false);  --> false
		t2.k1(false, true);  --> false
		t2.k1(false, false);  --> false

- || 는 연산에 참여하는 데이터가 하나라도 true가 있으면 -> true
    모든 데이터가 false 이면 -> false
		t2.k2(true, true);  --> true
		t2.k2(true, false);  --> true
		t2.k2(false, true);  --> true
		t2.k2(false, false);  --> false

- ! 데이터의 값을 반전시킴. true -> false , false -> true
            private int a=0;
	private boolean b = false;
	
	public void swithboolean() {
		b = !b;
		System.out.println(b);   ====> true

@ 증감 연산자 : ++, -- [1씩 증가/감소] // 단항연산자 ( ' = ' 없이 홀로사용)

 - ++a;
    ++이 변수 앞에 오면, 변수의 값이 1만큼 증가.
   그리고 그 증가된 값은 곧바로 변수에 대입 됨.

 - b++;
   ++이 변수 뒤에 오면, 변수의 값이 1만큼 증가.
   그러나 그 증가된 값은 나중에 해당 변수를 호출할 때 대입 됨.
 
@ 조건(=삼항) 연산자

 - (자료형) 변수명 = 조건식 ? 참일 때의 값 : 거짓일 때의 값;
   (자료형) 변수명 = 조건식 ? 참일 때의 변수 : 거짓일 때의 변수;
   (자료형) 변수명 = 조건식 ? 참일 때의 *반환형메서드* : 거짓일 때의 반환형메서드;

 [예시]
 String 변수명 = 3 > 4 ? "hello" : "no"; ===> sysout(변수명)? no
 long a = true? 55L : 60;   ===> sysout(a)? 55
 Dog b = false? new Dog(1) : new Dog(33); ===> sysout(b)? dog(33)

 변수 c는 a가 b보다 작거나 같으면 new StringBuffer("hello") 그렇지 않으면
 new StringBuffer("no")를 갖는다 변수 c를 선언하세요.
 ===> StringBuffer c = a <= b? new StringBuffer("hello") : new StringBuffer("no");

#삼항연산자를 계속 이어붙이기 가능.
 [A B C D F 점수 내기]
 public void cond5(int score) {
 char c = score >= 90 ? 'A' : score >= 80? 'B' : score >= 70 ? 'C' : score >= 60 ? 'D' : 'F'; }

@ [c언어] 전자제품 만들 때 사용하는 연산자들
 - 비트연산자 : & , | , ^ , ~(부호반전: 양수 -> 음수 일 때, +1
                                               음수 -> 양수 일 때, -1)
 - 시프트연산자 : >>(감소, 2^n 나누고 나머지는 무시)
                      <<(증가, 2^n 곱하기 나머지는 무시) 
 









